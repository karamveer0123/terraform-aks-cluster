name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:  # Declare environment variables globally for all jobs
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  STORAGE_ACCOUNT_NAME: terraformstatefilegithub
  CONTAINER_NAME: terraformstatefiles
  BACKEND_KEY: githubactions.tfstate
  AZURE_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
  DEV_ENV: dev
  QA_ENV: qa

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production  # Static environment for the Terraform job

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Log in to Azure using Service Principal credentials
    - name: Azure login
      uses: azure/login@v1
      with: 
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Show Azure account to verify login
    - name: Show Azure account
      run: az account show 

    # Initialize Terraform with Azure Backend Configuration
    - name: Terraform Init
      working-directory: terraform-manifest
      env:
        STORAGE_ACCOUNT_NAME: ${{ env.STORAGE_ACCOUNT_NAME }}
        CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        DEV_ENV: ${{ env.DEV_ENV }}
        AZURE_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
      run: terraform init -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ env.CONTAINER_NAME }}" -backend-config="key=${{ env.DEV_ENV }}-githubactions.tfstate" -backend-config="access_key=${{ secrets.AZURE_STORAGE_ACCESS_KEY }}"

    # Validate Terraform configuration
    - name: Terraform validate
      working-directory: terraform-manifest
      run: terraform validate

  create-aks-cluster-dev:
    name: 'Create AKS Cluster for Dev Environment'
    runs-on: ubuntu-latest
    environment: dev  # Static environment for the Dev environment

    needs: terraform  # This ensures the Terraform job completes first

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install Terraform and authenticate to Azure
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Azure login for AKS
      uses: azure/login@v1
      with: 
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Initialize Terraform with Azure Backend Configuration for AKS creation
    - name: Terraform Init for AKS
      working-directory: terraform-manifest
      env:
        STORAGE_ACCOUNT_NAME: ${{ env.STORAGE_ACCOUNT_NAME }}
        CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        DEV_ENV: ${{ env.DEV_ENV }}
        AZURE_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
        TF_VAR_environment: dev
      run: terraform init -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ env.CONTAINER_NAME }}" -backend-config="key=${{ env.DEV_ENV }}-githubactions.tfstate" -backend-config="access_key=${{ secrets.AZURE_STORAGE_ACCESS_KEY }}"

    # Terraform Plan for AKS (runs after the validate step)
    - name: Terraform Plan for AKS
      working-directory: terraform-manifest
      env:
        TF_VAR_environment: dev
      run: terraform plan -out=tfplan

    # Terraform Apply for AKS (applies changes to create the AKS cluster)
    - name: Terraform Apply for AKS
      working-directory: terraform-manifest
      env:
        TF_VAR_environment: dev
      run: terraform apply --auto-approve tfplan

  create-aks-cluster-qa:
    name: 'Create AKS Cluster for QA Environment'
    runs-on: ubuntu-latest
    environment: qa  # Static environment for the QA environment

    needs: terraform  # This ensures the Terraform job completes first

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install Terraform and authenticate to Azure
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Azure login for AKS
      uses: azure/login@v1
      with: 
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Initialize Terraform with Azure Backend Configuration for AKS creation
    - name: Terraform Init for AKS
      working-directory: terraform-manifest
      env:
        STORAGE_ACCOUNT_NAME: ${{ env.STORAGE_ACCOUNT_NAME }}
        CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        QA_ENV: ${{ env.QA_ENV }}
        AZURE_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
        TF_VAR_environment: qa
      run: terraform init -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ env.CONTAINER_NAME }}" -backend-config="key=${{ env.QA_ENV }}-githubactions.tfstate" -backend-config="access_key=${{ secrets.AZURE_STORAGE_ACCESS_KEY }}"

    # Terraform Plan for AKS (runs after the validate step)
    - name: Terraform Plan for AKS
      working-directory: terraform-manifest
      env:
        TF_VAR_environment: qa
      run: terraform plan -out=tfplan

    # Terraform Apply for AKS (applies changes to create the AKS cluster)
    - name: Terraform Apply for AKS
      working-directory: terraform-manifest
      env:
        TF_VAR_environment: qa
      run: terraform apply --auto-approve tfplan
